version: '3.8'

services:
  bot:
    container_name: bot
    restart: unless-stopped
    build:
      context: /bot
      dockerfile: bot.Dockerfile
    env_file:
      - ./bot/bot.env
    ports:
      - "8080:8080"
      - "8000:8000"
    networks:
      - backend
    depends_on:
      - kafka
      - redis
  scrapper:
    container_name: scrapper
    restart: unless-stopped
    build:
      context: /scrapper
      dockerfile: scrapper.Dockerfile
    env_file:
      - ./scrapper/scrapper.env
    ports:
      - "8081:8081"
      - "8001:8001"
    networks:
      - backend
    depends_on:
      - postgresql
      - kafka
      - redis

  postgresql:
    image: postgres:14.13
    restart: unless-stopped
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - backend

  liquibase-migrations:
    container_name: migrations
    image: liquibase/liquibase:4.29
    depends_on:
      - postgresql
    command:
      - --changelog-file=master.xml
      - --searchPath=/changesets
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/${POSTGRES_DB}
      - --username=${POSTGRES_USER}
      - --password=${POSTGRES_PASSWORD}
      - update
    volumes:
      - ./scrapper/migrations:/changesets
    networks:
      - backend

  kafka:
    image: apache/kafka:3.8.1
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 1
    volumes:
      - ./kafka-data:/var/lib/kafka/data
      - ./kafka-logs:/var/lib/kafka/logs
    networks:
      - backend

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/data
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./grafana:/var/lib/grafana

networks:
  backend: {}
